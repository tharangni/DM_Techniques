ifelse(newdata$hour <= 12,
newdata$time.of.day <- "morning",
ifelse(newdata$hour <= 18,
newdata$time.of.day <- "afternoon",
newdata$time.of.day <- "evening"))
newdata$hour <- hour(newdata$converted.time)
ifelse(newdata$hour <= 12,
newdata$time.of.day <- "morning",
ifelse(newdata$hour <= 18,
newdata$time.of.day <- "afternoon",
newdata$time.of.day <- "evening"))
newdata$time.of.day <- NULL
ifelse(newdata$hour <= 12,
newdata$time.of.day <- "morning",
ifelse(newdata$hour <= 18,
newdata$time.of.day <- "afternoon",
newdata$time.of.day <- "evening"))
newdata$hour
summary(newdata$hour)
if(newdata$hour <= 6) {
newdata$time.of.day <- "dawn"
} else if (newdata$hour > 6 && newdata$hour <= 12){
newdata$time.of.day <- "morning"
} else if (newdata$hour > 12 && newdata$hour <= 18){
newdata$time.of.day <- "afternoon"
} else if (newdata$hour > 18 && newdata$hour <= 24){
newdata$time.of.day <- "evening"
}
newdata$time.of.day <- ifelse(newdata$hour <= 6, "dawn",
ifelse(newdata$hour <= 12 & newdata$hour >6, "morning"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour <= 12 & newdata$hour >6, newdata$time.of.day <- "morning"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour <= 12 & newdata$hour >6, newdata$time.of.day <- "morning", "NA"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour <= 12 && newdata$hour >6, newdata$time.of.day <- "morning", "NA"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn", "NA")
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn", newdata$time.of.day <- "NA")
summary(newdata$time.of.day)
table(newdata$time.of.day)
#Use hour of the day to define time of the day
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour > 6 & newdata$hour <= 12, newdata$time.of.day <- "morning", newdata$time.of.day <- "NA" ))
newdata$time.of.day <- NULL
newdata[newdata$hour < 6]
newdata$time.of.day[newdata$hour < 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 && newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
table(newdata$time.of.day)
summary(newdata$time.of.day)
str(newdata$time.of.day)
newdata <- newdata[order(id, date),]
View(newdata)
table(newdata$id, newdata$date)
unique(newdata$date)
unique(newdata$date[which(newdata$id == "AS14.01")])
count(unique(newdata$date[which(newdata$id == "AS14.01")]))
sum((unique(newdata$date[which(newdata$id == "AS14.01")])))
length(unique(newdata$date[which(newdata$id == "AS14.01")]))
unique(newdata$id)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id)
}
View(DaysPerID)
DaysPerID <- data.frame(character(10), numeric(3), stringsAsFactors = FALSE)
DaysPerID <- data.frame(character(10), numeric(10), stringsAsFactors = FALSE)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id)
}
as.data.frame(DaysPerID)
View(DaysPerID)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
id_ <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, id_)
}
View(DaysPerID)
#how many days each "subject" is analysed
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 0)
}
View(DaysPerID)
plot(DaysPerID[,1], DaysPerID[,2])
#how many days each "subject" is analysed
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 2)
}
############
View(DaysPerID)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 1)
}
######################################
plot(DaysPerID[,1], DaysPerID[,2])
View(DaysPerID)
plot(DaysPerID[,2])
rm(list=ls(all=TRUE))
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, date),]
######################################
View(newdata)
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
View(newdata)
######################################
#What time is the 'mood' asked to be rated?
moodData <- subset(newdata, (!is.na(newdata[, newdata$value.mood])))
View(moodData)
table(moodData$hour)
table(moodData$time.of.day)
View(DaysPerID)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 0)
}
View(DaysPerID)
table(DaysPerID[,1], DaysPerID[,2])
table(DaysPerID[,1])
barplot(DaysPerID[,2])
plot(DaysPerID[,2])
plot(DaysPerID[,2])
xlim = DaysPerID[,1]
table(moodData$hour)
table(moodData$time.of.day)
mean(moodData$value.mood)
summary(moodData$value.mood)
table(moodData$value.mood)
table(moodData$value.mood)
aggMood <- aggregate(moodData, by=list(moodData$id,moodData$date),
FUN=mean, na.rm=TRUE)
View(aggMood)
rm aggMood
rm(c(mn = mean(x), n = length(x) ))
rm (aggMood)
View(moodData)
aggMood <- moodData[moodvariables]
moodvariables <- c("id" ,"value.mood", "date")
aggMood <- moodData[moodvariables]
aggMood <- moodData[, .("id" ,"value.mood", "date")]
aggMood <- moodData[ , .("id" ,"value.mood", "date")]
View(aggMood)
moodvariables
moodData
size(moodData)
aggMood <- moodData[, list("id" ,"value.mood", "date")]
aggMood <- moodData[, .(id ,value.mood, date)]
View(aggMood)
aggMood <- moodData[, .(mean(value.mood), by = .(id, date)]
aggMood <- moodData[, .mean(value.mood), by = .(id, date)]
aggMood <- moodData[, .mean(value.mood),
by = .(id, date)]
aggMood <- moodData[, .N,
by = .(id, date)]
View(aggMood)
aggMood <- moodData[, .N, mean(value.mood),
by = .(id, date)]
#Aggregate by id and day with #count
aggMood <- moodData[, mood_count = .N, mood_mean = mean(value.mood),
by = .(id, date)]
aggMood <- moodData[, mood_count = N, mood_mean = mean(value.mood),
by = .(id, date)]
aggMood <- moodData[, mood_count := .N, mood_mean := mean(value.mood),
by = .(id, date)]
View(aggMood)
#Aggregate by id and day with #count
aggMood <- moodData[, mood_count := .N,
by = .(id, date)]
View(aggMood)
aggMood <- moodData[, .N,
by = .(id, date)]
aggMood <- moodData[, list(mood_count = .N),
by = .(id, date)]
View(aggMood)
aggMood <- moodData[, list(mood_count = .N, mood_mean = mean(value.mood)),
by = .(id, date)]
View(aggMood)
View(aggMood)
View(aggMood)
View(aggMood)
aggMood <- moodData[, .(mood_count = .N, mood_mean = mean(value.mood)),
by = .(id, date)]
View(aggMood)
View(newdata)
max(moodData$date)
min(moodData$date)
max(moodData$date) - min(moodData$date)
View(aggMood)
idMood <- aggMood[, .(mood_mean = mean(mood_mean)),
by = .(id)]
View(idMood)
max(moodData$date) - min(moodData$date)
rm(list = ls())
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
rm(list = ls())
#Install packages, if not available
install.packages("data.table")
install.packages("lubridate")
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
View(Mood)
#####################################
#Delete useless variables
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
View(newdata)
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
######################################
View(newdata)
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
View(newdata)
######################################
#EXPLORATORY ANALYSIS (MOOD)
######################################
#for how many days each "subject" is tracked
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 0)
}
View(DaysPerID)
######################################
#What time is the 'mood' asked to be rated?
moodData <- subset(newdata, (!is.na(newdata[, newdata$value.mood])))
table(moodData$hour)
table(moodData$time.of.day)
######################################
#Distribution of mood
#not aggregated per day!
table(moodData$value.mood)
##Aggregate mood per day
#Choose relevant variables
aggMood <- moodData[, .(id ,value.mood, date)]
#Aggregate by id and day with #count
aggMood <- moodData[, .(mood_count = .N, mood_mean = mean(value.mood)),
by = .(id, date)]
View(aggMood)
View(DaysPerID)
idMood <- aggMood[, .(mood_mean = mean(mood_mean)),
by = .(id)]
#####################################
View(idMood)
#Total number of days the dataset was collected
max(moodData$date) - min(moodData$date)
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
######################################
#####################################
#Install packages, if not available
# install.packages("data.table")
# install.packages("lubridate")
######################################
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
View(newdata)
newdata$weekday <- weekdays(newdata$date)
View(newdata)
rm(list = [])
rm(list = all())
rm(list = ls())
clc
clc <- function() cat(rep("\n", 50))
clc
clc <- function( cat(rep("\n", 50)))
clc <- function() {cat(rep("\n", 50))}
clc
rm(list = ls())
