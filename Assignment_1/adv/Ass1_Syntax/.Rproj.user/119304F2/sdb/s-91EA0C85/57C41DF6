{
    "collab_server" : "",
    "contents" : "######################################\n# PREPROCESS DATA FOR MODELLING\n# (make sure that PreData is in environment - from ReadData.R)\n\n#This syntax: \n# - Deletes correlated variables\n# - deals with missing values\n# - makes Lags and Moving Averages Variables\n######################################\n\n\n######################################\n#Load helper functions\nsource(\"./Helper_Functions.R\")\n######################################\n\n\n######################################\n# Delete Highly correlated Variables\n# 1 - Delete count because no informative values\nPreData$count <- NULL\n\n# 2 - Delete either count_built_in or open count\n# Choose agg_count_builtin because \nPreData$agg_builtin <- NULL\n\n#Visualise correlations after changes\nggcorr(data = PreData, label = TRUE, label_alpha = TRUE, label_size = 2.3, label_round = 2, \n       hjust = 0.9, size = 3)\n######################################\n\n######################################\n#Check Variable filling\n#Replace with 0's since we are dealing with time\nPreData[is.na(PreData)] <- 0\n######################################\n\n######################################\n# keep only statistically significant variables (according to a prior linear regression run)\n# # NOTE: only saturday is relevant, but here we have all weekdays together, they are split up once PreData is a dataframe down below\n# keeps = c(\"id\", \"date\", \"weekday\", \"agg_activity\", \"interp_valence\", \"interp_mood\", \"interp_arousal\", \"agg_utilities\", \"agg_count_entertainment\", \"agg_count_office\")\n# PreData = PreData[, keeps, with = FALSE]\n######################################\n\n######################################\n#Make lag Variables\nPreData$lag_mood = PreData[, .(lag_mood = shift(interp_mood)), by = id][, 2]\nPreData$lag_arousal = PreData[, .(lag_arousal = shift(interp_arousal)), by = id][, 2]\nPreData$lag_valence = PreData[, .(lag_valence = shift(interp_valence)), by = id][, 2]\nPreData$lag_activity = PreData[, .(lag_activity = shift(agg_activity)), by = id][, 2]\nPreData$lag_screen = PreData[, .(lag_screen = shift(agg_screen)), by = id][, 2]\nPreData$lag_call = PreData[, .(lag_call = shift(agg_call)), by = id][, 2]\nPreData$lag_sms = PreData[, .(lag_sms = shift(agg_sms)), by = id][, 2]\nPreData$lag_communication = PreData[, .(lag_communication = shift(agg_communication)), by = id][, 2]\nPreData$lag_entertainment = PreData[, .(lag_entertainment = shift(agg_entertainment)), by = id][, 2]\nPreData$lag_finance = PreData[, .(lag_finance = shift(agg_finance)), by = id][, 2]\nPreData$lag_game = PreData[, .(lag_game = shift(agg_game)), by = id][, 2]\nPreData$lag_office = PreData[, .(lag_office = shift(agg_office)), by = id][, 2]\nPreData$lag_other = PreData[, .(lag_other = shift(agg_other)), by = id][, 2]\nPreData$lag_social = PreData[, .(lag_social = shift(agg_social)), by = id][, 2]\nPreData$lag_travel = PreData[, .(lag_travel = shift(agg_travel)), by = id][, 2]\nPreData$lag_unknown = PreData[, .(lag_unknown = shift(agg_unknown)), by = id][, 2]\nPreData$lag_utilities = PreData[, .(lag_utilities = shift(agg_utilities)), by = id][, 2]\nPreData$lag_weather = PreData[, .(lag_weather = shift(agg_weather)), by = id][, 2]\nPreData$lag_count_builtin = PreData[, .(lag_count_builtin = shift(agg_count_builtin)), by = id][, 2]\nPreData$lag_count_communication = PreData[, .(lag_count_communication = shift(agg_count_communication)), by = id][, 2]\nPreData$lag_count_entertainment = PreData[, .(lag_count_entertainment = shift(agg_count_entertainment)), by = id][, 2]\nPreData$lag_count_finance = PreData[, .(lag_count_finance = shift(agg_count_finance)), by = id][, 2]\nPreData$lag_count_game = PreData[, .(lag_count_game = shift(agg_count_game)), by = id][, 2]\nPreData$lag_count_office = PreData[, .(lag_count_office = shift(agg_count_office)), by = id][, 2]\nPreData$lag_count_other = PreData[, .(lag_count_other = shift(agg_count_other)), by = id][, 2]\nPreData$lag_count_social = PreData[, .(lag_count_social = shift(agg_count_social)), by = id][, 2]\nPreData$lag_count_travel = PreData[, .(lag_count_travel = shift(agg_count_travel)), by = id][, 2]\nPreData$lag_count_unknown = PreData[, .(lag_count_unknown = shift(agg_count_unknown)), by = id][, 2]\nPreData$lag_count_utilities = PreData[, .(lag_count_utilities = shift(agg_count_utilities)), by = id][, 2]\nPreData$lag_count_weather = PreData[, .(lag_count_weather = shift(agg_count_weather)), by = id][, 2]\nPreData$lag_open_count = PreData[, .(lag_open_count = shift(open_count)), by = id][, 2]\n# \n# \n######################################\n\n######################################\n# Create MA variables\n# Delete the unwanted variables in CreateMovingAverages.R\nsource(\"./CreateMovingAverages.R\")\n######################################\n\n\n\n######################################\n# #Delete unnecessary (current t) variables\nPreData$agg_screen <- NULL\nPreData$agg_communication <- NULL\nPreData$agg_game <- NULL\nPreData$agg_social <- NULL\nPreData$agg_utilities <- NULL\nPreData$agg_count_entertainment <- NULL\nPreData$agg_count_office <- NULL\nPreData$agg_count_travel <- NULL\nPreData$agg_count_weather <- NULL\nPreData$agg_call <- NULL\nPreData$agg_entertainment <- NULL\nPreData$agg_office <- NULL\nPreData$agg_travel <- NULL\nPreData$agg_weather <- NULL\nPreData$agg_count_finance <- NULL\nPreData$agg_count_other <- NULL\nPreData$agg_count_unknown <- NULL\nPreData$agg_sms <- NULL\nPreData$agg_finance <- NULL\nPreData$agg_other <- NULL\nPreData$agg_unknown <- NULL\nPreData$agg_count_communication <- NULL\nPreData$agg_count_game <- NULL\nPreData$agg_count_social <- NULL\nPreData$agg_count_utilities <- NULL\nPreData$agg_activity = NULL\nPreData$agg_count_builtin = NULL\nPreData$open_count = NULL\nPreData$interp_arousal = NULL\nPreData$interp_valence = NULL\n######################################\n\n\n\n# ######################################\n# Make Dummies for weekday\nPreData_df <- as.data.frame(PreData)\nfor(level in unique(PreData_df$weekday)){\n  PreData_df[paste(\"dummy\", level, sep = \"_\")] <- ifelse(PreData_df$weekday == level, 1, 0)\n}\n\n#Delete weekday\nPreData_df$weekday <- NULL\n\n#Delete one dummy to avoid multicollinearity\nPreData_df$dummy_Monday <- NULL\n# ######################################\n\n\n##########################################\n# ALTERNATIVE TO DUMMIES - because they refuse to work for me \n\n# #Add Weekday as an integer\n# aggData$weekday = wday(aggData$date)\n\n# convert saturdays to 1; all other days to 0\n# func_saturday_only <- function (day) {\n#   if(day == \"Saturday\")\n#     return(1)\n#   else\n#     return(0)\n# \n# }\n# PreData$saturday = lapply(PreData$weekday, func_saturday_only)\n# # PreData$saturday = apply(PreData, MARGIN=2, FUN=func_saturday_only)\n# PreData$weekday = NULL\n# PreData$date = NULL # once we have weekday info, the date is useless right?\n\n# # for time series regression: lag saturday by 1 day: if the day we predict would be saturday, we want to tell it to the model by having the previous day marked with '1'\n# # PreData_df$lag_saturday <- PreData_df[,.(ma2 = as.numeric(get.mav(agg__count_office, n = 1))), by = id] [, 2]\n##########################################\n\n\n\n######################################\n# # doing an experiment on linear regression per user \n# experiment <- PreData_df\n# \n# # discard all dummies except saturday, keep the rest of vars\n# keeps = c(\"id\", \"date\", \"agg_activity\", \"interp_valence\", \"interp_mood\", \"interp_arousal\", \"agg_utilities\", \"agg_count_entertainment\", \"agg_count_office\", \"dummy_Saturday\")\n# PreData_df = PreData_df[keeps]\n######################################\n\n\n\n\n",
    "created" : 1523974196326.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1977522157",
    "id" : "57C41DF6",
    "lastKnownWriteTime" : 1524087796,
    "last_content_update" : 1524087796889,
    "path" : "~/Desktop/Data Mining Techniques/DM_Techniques/Assignment_1/adv/Ass1_Syntax/Regression_Preprocessing.R",
    "project_path" : "Regression_Preprocessing.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}