PreData_df$agg_count_game <- NULL
PreData_df$agg_count_social <- NULL
PreData_df$agg_count_utilities <- NULL
View(PreData_df)
PreData_df <- as.data.frame(PreData)
rm(list = ls())
######################################
#Install packages, if not available
# install.packages("data.table")
# install.packages("lubridate")
# install.packages("GGally")
######################################
######################################
#Load packages
library(data.table)
library(lubridate)
library(ggplot2)
library(GGally)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
#Add nth day into newdata (column)
min_day <- as.numeric(min(newdata$date))
newdata$nth_day <- as.numeric(unlist(lapply(X = as.numeric(newdata$date), FUN = function(x) x+1-min_day)))
rm(min_day)
######################################
#Load packages
library(data.table)
library(lubridate)
library(ggplot2)
library(GGally)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
#Add nth day into newdata (column)
min_day <- as.numeric(min(newdata$date))
newdata$nth_day <- as.numeric(unlist(lapply(X = as.numeric(newdata$date), FUN = function(x) x+1-min_day)))
rm(min_day)
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
#Load packages
library(data.table)
library(lubridate)
library(ggplot2)
library(GGally)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
#Add nth day into newdata (column)
min_day <- as.numeric(min(newdata$date))
newdata$nth_day <- as.numeric(unlist(lapply(X = as.numeric(newdata$date), FUN = function(x) x+1-min_day)))
rm(min_day)
######################################
#Load packages
library(data.table)
library(lubridate)
library(ggplot2)
library(GGally)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
#Add nth day into newdata (column)
min_day <- as.numeric(min(newdata$date))
newdata$nth_day <- as.numeric(unlist(lapply(X = as.numeric(newdata$date), FUN = function(x) x+1-min_day)))
rm(min_day)
######################################
#AGGREGATE DATA (DAILY LEVEL)
#make sure that newdata is loaded in environment - from ReadData.R
#This syntax:
# - creates interesting variables
# - aggregates the data
# - prepares the data for modelling
######################################
######################################
#Install packages, if not available
#install.packages("zoo")
######################################
######################################
#Load package
library(zoo)
######################################
######################################
# Create variables number of times each
# application was open throughout the day (use the sum in aggregation to get this value).
newdata$count_value.appCat.builtin <- ifelse(is.na(newdata$value.appCat.builtin) == FALSE,
newdata$count_value.appCat.builtin <- 1,
newdata$count_value.appCat.builtin <- 0)
newdata$count_value.appCat.communication <- ifelse(is.na(newdata$value.appCat.communication) == FALSE,
newdata$count_value.appCat.communication <- 1,
newdata$count_value.appCat.communication <- 0)
newdata$count_value.appCat.entertainment <- ifelse(is.na(newdata$value.appCat.entertainment) == FALSE,
newdata$count_value.appCat.entertainment <- 1,
newdata$count_value.appCat.entertainment <- 0)
newdata$count_value.appCat.finance <- ifelse(is.na(newdata$value.appCat.finance) == FALSE,
newdata$count_value.appCat.finance <- 1,
newdata$count_value.appCat.finance <- 0)
newdata$count_value.appCat.game <- ifelse(is.na(newdata$value.appCat.game) == FALSE,
newdata$count_value.appCat.game <- 1,
newdata$count_value.appCat.game <- 0)
newdata$count_value.appCat.office <- ifelse(is.na(newdata$value.appCat.office) == FALSE,
newdata$count_value.appCat.office <- 1,
newdata$count_value.appCat.office <- 0)
newdata$count_value.appCat.other <- ifelse(is.na(newdata$value.appCat.other) == FALSE,
newdata$count_value.appCat.other <- 1,
newdata$count_value.appCat.other <- 0)
newdata$count_value.appCat.social <- ifelse(is.na(newdata$value.appCat.social) == FALSE,
newdata$count_value.appCat.social <- 1,
newdata$count_value.appCat.social <- 0)
newdata$count_value.appCat.travel <- ifelse(is.na(newdata$value.appCat.travel) == FALSE,
newdata$count_value.appCat.travel <- 1,
newdata$count_value.appCat.travel <- 0)
newdata$count_value.appCat.unknown <- ifelse(is.na(newdata$value.appCat.unknown) == FALSE,
newdata$count_value.appCat.unknown <- 1,
newdata$count_value.appCat.unknown <- 0)
newdata$count_value.appCat.utilities <- ifelse(is.na(newdata$value.appCat.utilities) == FALSE,
newdata$count_value.appCat.utilities <- 1,
newdata$count_value.appCat.utilities <- 0)
newdata$count_value.appCat.weather <- ifelse(is.na(newdata$value.appCat.weather) == FALSE,
newdata$count_value.appCat.weather <- 1,
newdata$count_value.appCat.weather <- 0)
######################################
######################################
# Aggregate data on by day and id.
aggData = newdata[, .(count = .N,
agg_mood = mean(value.mood, na.rm=TRUE),
agg_arousal = mean(value.circumplex.arousal, na.rm=TRUE),
agg_valence = mean(value.circumplex.valence, na.rm=TRUE),
agg_activity = mean(value.activity, na.rm=TRUE),
agg_screen = mean(value.screen, na.rm=TRUE),
agg_call = sum(value.call, na.rm=TRUE),
agg_sms = sum(value.sms, na.rm=TRUE),
agg_builtin = mean(value.appCat.builtin, na.rm=TRUE),
agg_communication = mean(value.appCat.communication, na.rm=TRUE),
agg_entertainment = mean(value.appCat.entertainment, na.rm=TRUE),
agg_finance = mean(value.appCat.finance, na.rm=TRUE),
agg_game = mean(value.appCat.game, na.rm=TRUE),
agg_office = mean(value.appCat.office, na.rm=TRUE),
agg_other = mean(value.appCat.other, na.rm=TRUE),
agg_social = mean(value.appCat.social, na.rm=TRUE),
agg_travel = mean(value.appCat.travel, na.rm=TRUE),
agg_unknown = mean(value.appCat.unknown, na.rm=TRUE),
agg_utilities = mean(value.appCat.utilities, na.rm=TRUE),
agg_weather = mean(value.appCat.weather, na.rm=TRUE),
agg_count_builtin = sum(count_value.appCat.builtin, na.rm=TRUE),
agg_count_communication = sum(count_value.appCat.communication, na.rm=TRUE),
agg_count_entertainment = sum(count_value.appCat.entertainment, na.rm=TRUE),
agg_count_finance = sum(count_value.appCat.finance, na.rm=TRUE),
agg_count_game = sum(count_value.appCat.game, na.rm=TRUE),
agg_count_office = sum(count_value.appCat.office, na.rm=TRUE),
agg_count_other = sum(count_value.appCat.other, na.rm=TRUE),
agg_count_social = sum(count_value.appCat.social, na.rm=TRUE),
agg_count_travel = sum(count_value.appCat.travel, na.rm=TRUE),
agg_count_unknown = sum(count_value.appCat.unknown, na.rm=TRUE),
agg_count_utilities = sum(count_value.appCat.utilities, na.rm=TRUE),
agg_count_weather = sum(count_value.appCat.weather, na.rm=TRUE)),
by = .(id, date)]
######################################
# Include other more interesting variables
# Add weekday
aggData$weekday <- weekdays(aggData$date)
# Count number of different applications used per day
aggData$open_count <- aggData[,apply(X = aggData[, 11:22], MARGIN = 1, FUN = function(x) sum(!is.nan(x)))]
######################################
######################################
#Exclude data with missing Mood
PreData <- subset(aggData, (!is.nan(aggData[, aggData$agg_mood]) | !is.nan(aggData[, aggData$agg_screen]) ))
######################################
######################################
#Interpolate missing values for mood, arousal and valence
PreData$interp_mood <- na.approx(PreData$agg_mood, na.rm = FALSE)
PreData$interp_arousal <- na.approx(PreData$agg_arousal, na.rm = FALSE)
PreData$interp_valence <- na.approx(PreData$agg_valence, na.rm = FALSE)
#remove non interpolated variables
PreData$agg_mood <- NULL
PreData$agg_arousal <- NULL
PreData$agg_valence <- NULL
######################################
######################################
#Visualise correlations
ggcorr(data = PreData, label = TRUE, label_alpha = TRUE, label_size = 2.3, label_round = 2,
hjust = 0.9, size = 3)
######################################
######################################
rm(Mood, aggData, newdata)
######################################
######################################
#Load helper functions
source("./Helper_Functions.R")
######################################
######################################
# Delete Highly correlated Variables
# 1 - Delete count because no informative values
PreData$count <- NULL
# 2 - Delete either count_built_in or open count
# Choose agg_count_builtin because
PreData$agg_builtin <- NULL
#Visualise correlations after changes
ggcorr(data = PreData, label = TRUE, label_alpha = TRUE, label_size = 2.3, label_round = 2,
hjust = 0.9, size = 3)
######################################
######################################
#Check Variable filling
#Replace with 0's since we are dealing with time
PreData[is.na(PreData)] <- 0
######################################
######################################
#Make Dummies for weekday
PreData_df <- as.data.frame(PreData)
for(level in unique(PreData_df$weekday)){
PreData_df[paste("dummy", level, sep = "_")] <- ifelse(PreData_df$weekday == level, 1, 0)
}
#Delete weekday
PreData_df$weekday <- NULL
#Delete one dummy to avoid multicollinearity
PreData_df$dummy_Monday <- NULL
######################################
View(PreData_df)
######################################
#Make lag Variables
PreData_df$lag_mood = PreData_df[, .(lag_mood = shift(interp_mood)), by = id][, 2]
PreData_df$lag_arousal = PreData_df[, .(lag_arousal = shift(interp_arousal)), by = id][, 2]
PreData_df$lag_valence = PreData_df[, .(lag_valence = shift(interp_valence)), by = id][, 2]
PreData_df$lag_activity = PreData_df[, .(lag_activity = shift(agg_activity)), by = id][, 2]
PreData_df$lag_screen = PreData_df[, .(lag_screen = shift(agg_screen)), by = id][, 2]
PreData_df$lag_call = PreData_df[, .(lag_call = shift(agg_call)), by = id][, 2]
PreData_df$lag_sms = PreData_df[, .(lag_sms = shift(agg_sms)), by = id][, 2]
PreData_df$lag_communication = PreData_df[, .(lag_communication = shift(agg_communication)), by = id][, 2]
PreData_df$lag_entertainment = PreData_df[, .(lag_entertainment = shift(agg_entertainment)), by = id][, 2]
PreData_df$lag_finance = PreData_df[, .(lag_finance = shift(agg_finance)), by = id][, 2]
PreData_df$lag_game = PreData_df[, .(lag_game = shift(agg_game)), by = id][, 2]
PreData_df$lag_office = PreData_df[, .(lag_office = shift(agg_office)), by = id][, 2]
PreData_df$lag_other = PreData_df[, .(lag_other = shift(agg_other)), by = id][, 2]
PreData_df$lag_social = PreData_df[, .(lag_social = shift(agg_social)), by = id][, 2]
PreData_df$lag_travel = PreData_df[, .(lag_travel = shift(agg_travel)), by = id][, 2]
PreData_df$lag_unknown = PreData_df[, .(lag_unknown = shift(agg_unknown)), by = id][, 2]
PreData_df$lag_utilities = PreData_df[, .(lag_utilities = shift(agg_utilities)), by = id][, 2]
PreData_df$lag_weather = PreData_df[, .(lag_weather = shift(agg_weather)), by = id][, 2]
PreData_df$lag_count_builtin = PreData_df[, .(lag_count_builtin = shift(agg_count_builtin)), by = id][, 2]
PreData_df$lag_count_communication = PreData_df[, .(lag_count_communication = shift(agg_count_communication)), by = id][, 2]
PreData_df$lag_count_entertainment = PreData_df[, .(lag_count_entertainment = shift(agg_count_entertainment)), by = id][, 2]
PreData_df$lag_count_finance = PreData_df[, .(lag_count_finance = shift(agg_count_finance)), by = id][, 2]
PreData_df$lag_count_game = PreData_df[, .(lag_count_game = shift(agg_count_game)), by = id][, 2]
PreData_df$lag_count_office = PreData_df[, .(lag_count_office = shift(agg_count_office)), by = id][, 2]
PreData_df$lag_count_other = PreData_df[, .(lag_count_other = shift(agg_count_other)), by = id][, 2]
PreData_df$lag_count_social = PreData_df[, .(lag_count_social = shift(agg_count_social)), by = id][, 2]
PreData_df$lag_count_travel = PreData_df[, .(lag_count_travel = shift(agg_count_travek)), by = id][, 2]
PreData_df$lag_count_unknown = PreData_df[, .(lag_count_unknown = shift(agg_count_unknown)), by = id][, 2]
PreData_df$lag_count_utilities = PreData_df[, .(lag_count_utilities = shift(agg_count_utlities)), by = id][, 2]
PreData_df$lag_count_weather = PreData_df[, .(lag_count_weather = shift(agg_count_weather)), by = id][, 2]
PreData_df$lag_open_count = PreData_df[, .(lag_open_count = shift(open_count)), by = id][, 2]
######################################
#Make lag Variables
PreData$lag_mood = PreData[, .(lag_mood = shift(interp_mood)), by = id][, 2]
PreData$lag_arousal = PreData[, .(lag_arousal = shift(interp_arousal)), by = id][, 2]
PreData$lag_valence = PreData[, .(lag_valence = shift(interp_valence)), by = id][, 2]
PreData$lag_activity = PreData[, .(lag_activity = shift(agg_activity)), by = id][, 2]
PreData$lag_screen = PreData[, .(lag_screen = shift(agg_screen)), by = id][, 2]
PreData$lag_call = PreData[, .(lag_call = shift(agg_call)), by = id][, 2]
PreData$lag_sms = PreData[, .(lag_sms = shift(agg_sms)), by = id][, 2]
PreData$lag_communication = PreData[, .(lag_communication = shift(agg_communication)), by = id][, 2]
PreData$lag_entertainment = PreData[, .(lag_entertainment = shift(agg_entertainment)), by = id][, 2]
PreData$lag_finance = PreData[, .(lag_finance = shift(agg_finance)), by = id][, 2]
PreData$lag_game = PreData[, .(lag_game = shift(agg_game)), by = id][, 2]
PreData$lag_office = PreData[, .(lag_office = shift(agg_office)), by = id][, 2]
PreData$lag_other = PreData[, .(lag_other = shift(agg_other)), by = id][, 2]
PreData$lag_social = PreData[, .(lag_social = shift(agg_social)), by = id][, 2]
PreData$lag_travel = PreData[, .(lag_travel = shift(agg_travel)), by = id][, 2]
PreData$lag_unknown = PreData[, .(lag_unknown = shift(agg_unknown)), by = id][, 2]
PreData$lag_utilities = PreData[, .(lag_utilities = shift(agg_utilities)), by = id][, 2]
PreData$lag_weather = PreData[, .(lag_weather = shift(agg_weather)), by = id][, 2]
PreData$lag_count_builtin = PreData[, .(lag_count_builtin = shift(agg_count_builtin)), by = id][, 2]
PreData$lag_count_communication = PreData[, .(lag_count_communication = shift(agg_count_communication)), by = id][, 2]
PreData$lag_count_entertainment = PreData[, .(lag_count_entertainment = shift(agg_count_entertainment)), by = id][, 2]
PreData$lag_count_finance = PreData[, .(lag_count_finance = shift(agg_count_finance)), by = id][, 2]
PreData$lag_count_game = PreData[, .(lag_count_game = shift(agg_count_game)), by = id][, 2]
PreData$lag_count_office = PreData[, .(lag_count_office = shift(agg_count_office)), by = id][, 2]
PreData$lag_count_other = PreData[, .(lag_count_other = shift(agg_count_other)), by = id][, 2]
PreData$lag_count_social = PreData[, .(lag_count_social = shift(agg_count_social)), by = id][, 2]
PreData$lag_count_travel = PreData[, .(lag_count_travel = shift(agg_count_travek)), by = id][, 2]
PreData$lag_count_unknown = PreData[, .(lag_count_unknown = shift(agg_count_unknown)), by = id][, 2]
PreData$lag_count_utilities = PreData[, .(lag_count_utilities = shift(agg_count_utlities)), by = id][, 2]
PreData$lag_count_weather = PreData[, .(lag_count_weather = shift(agg_count_weather)), by = id][, 2]
PreData$lag_open_count = PreData[, .(lag_open_count = shift(open_count)), by = id][, 2]
#Delete unnecessary (current t) variables
PreData$agg_screen <- NULL
PreData$agg_communication <- NULL
PreData$agg_game <- NULL
PreData$agg_social <- NULL
PreData$agg_utilities <- NULL
PreData$agg_count_entertainment <- NULL
PreData$agg_count_office <- NULL
PreData$agg_count_travel <- NULL
PreData$agg_count_weather <- NULL
PreData$agg_call <- NULL
PreData$agg_entertainment <- NULL
PreData$agg_office <- NULL
PreData$agg_travel <- NULL
PreData$agg_weather <- NULL
PreData$agg_count_finance <- NULL
PreData$agg_count_other <- NULL
PreData$agg_count_unknown <- NULL
PreData$agg_sms <- NULL
PreData$agg_finance <- NULL
PreData$agg_other <- NULL
PreData$agg_unknown <- NULL
PreData$agg_count_communication <- NULL
PreData$agg_count_game <- NULL
PreData$agg_count_social <- NULL
PreData$agg_count_utilities <- NULL
View(PreData)
View(PreData)
SplitData <- splitdata_id(PreData)
trainingSet <- rbind(SplitData[[1]], SplitData[[2]])
testingSet <- SplitData[[3]]
View(trainingSet)
Temp <- PreData_df
Temp <- PreData_df
Temp$id <- NULL
Temp$date <- NULL
View(Temp)
# Split dataset with the dummy variable
SplitData <- splitdata_id(Temp)
trainingSet <- rbind(SplitData[[1]], SplitData[[2]])
testingSet <- SplitData[[3]]
lmModel <- lm(data = trainingSet, interp_mood ~.)
lmModel <- lm(interp_mood ~., data = trainingSet)
SplitData <- splitdata_id(Temp)
trainingSet <- rbind(SplitData[[1]], SplitData[[2]])
testingSet <- SplitData[[3]]
Temp <- PreData_df
SplitData <- splitdata_id(Temp)
trainingSet <- rbind(SplitData[[1]], SplitData[[2]])
testingSet <- SplitData[[3]]
Temp$id <- NULL
Temp$date <- NULL
lmModel <- lm(trainingSet$ ~., data = trainingSet)
trainingSet$id <- NULL
trainingSet$date <- NULL
lmModel <- lm(interp_mood ~., data = trainingSet)
summary(lmModel)
predictMood <- predict(lmModel, testingSet)
actualPreds <- data.frame(cbind(actuals = testingSet$interp_mood, predicts = predictMood))
rmse(actual = actualPreds$actuals, predicted = actualPreds$predicts)
Performance(actual = actualPreds$actuals, predicted = actualPreds$predicts)
