take_average(7)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- as.name(paste("lag.mood", i, sep = ""))
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
}
take_average(7)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- paste("lag.mood", i, sep = "")
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
}
take_average(7)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- paste("lag.mood", i, sep = "")
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
return (variables)
}
v = take_average(7)
v
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- paste("lag.mood", i, sep = "")
aggMoodDay[, currentVariable] <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
return (variables)
}
v = take_average(7)
View(aggMoodDay)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- as.name(paste("lag.mood", i, sep = ""))
aggMoodDay[, currentVariable] <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
return (variables)
}
v = take_average(7)
rm(list = ls())
#Load packages
library(data.table)
library(lubridate)
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
Mood$V1 <- NULL
######################################
str(Mood)
summary(Mood)
newdata = reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
######################################
#EXPLORATORY ANALYSIS (MOOD)
######################################
#for how many days each "subject" is tracked
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 0)
}
#Conclusion: Each ID conducts the experiment for a different number of days
######################################
#What time is the 'mood' asked to be rated?
moodData <- subset(newdata, (!is.na(newdata[, newdata$value.mood])))
#Conclusion: No fixed hours for app to request user to rate 'mood'
######################################
# Distribution of mood
# not aggregated per day!
# table(moodData$value.mood)
##Aggregate mood per day
#Choose relevant variables
aggMood <- moodData[, .(id ,value.mood, date)]
testaggmood <- moodData[, .(id ,value.mood, date)]
#Aggregate by id and day with #count
aggMood <- moodData[, .(mood_count = .N, mood_mean = mean(value.mood)),
by = .(id, date)]
#Visualise
#TODO (average mood per user, track mood per user over time, etcâ€¦)
#average mood per user
idMood <- aggMood[, .(mood_mean = mean(mood_mean)),
by = .(id)]
######################################
#Total number of days the dataset was collected
max(moodData$date) - min(moodData$date)
######################################
#Select only relevant variables for benchmark model
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
#Aggregate by day, taking the daily average of mood
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
######################################
#Lag mood variable
aggMoodDay$lag.mood <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id][, 2]
# **********************************************
#                   NEW STUFF
# **********************************************
# install.packages("dplyr")
# install.packages("GGally")
# install.packages("xts")
# library("dplyr")
library("GGlly")
# library("xts")
# aggregate all variables by day
aggData = newdata[, .(agg_mood = mean(value.mood, na.rm=TRUE),
agg_arousal = mean(value.circumplex.arousal, na.rm=TRUE),
agg_valence = mean(value.circumplex.valence, na.rm=TRUE),
agg_activity = mean(value.activity, na.rm=TRUE),
agg_screen = mean(value.screen, na.rm=TRUE),
agg_call = sum(value.call, na.rm=TRUE),
agg_sms = sum(value.sms, na.rm=TRUE),
agg_builtin = mean(value.appCat.builtin, na.rm=TRUE),
agg_communication = mean(value.appCat.communication, na.rm=TRUE),
agg_entertainment = mean(value.appCat.entertainment, na.rm=TRUE),
agg_finance = mean(value.appCat.finance, na.rm=TRUE),
agg_game = mean(value.appCat.game, na.rm=TRUE),
agg_office = mean(value.appCat.office, na.rm=TRUE),
agg_other = mean(value.appCat.other, na.rm=TRUE),
agg_social = mean(value.appCat.social, na.rm=TRUE),
agg_travel = mean(value.appCat.travel, na.rm=TRUE),
agg_unknown = mean(value.appCat.unknown, na.rm=TRUE),
agg_utilities = mean(value.appCat.utilities, na.rm=TRUE),
agg_weather = mean(value.appCat.weather, na.rm=TRUE)
),
by = .(id, date)]
View(aggData)
DaysPerID <- data.frame(newdata$id, newdata$date)
colnames(DaysPerID) <- c("ID", "Date")
DaysPerID <- aggregate(x = DaysPerID$Date, by = DaysPerID["ID"],FUN = function(x) length(unique(x)))
colnames(DaysPerID) <- c("ID", "Days")
DaysPerID$ID <- as.character(DaysPerID$ID)
DaysPerID$Days <- as.numeric(DaysPerID$Days)
DaysPerID$ID <- unlist(lapply(DaysPerID$ID, FUN = function(x) as.numeric(sub("AS14.", "", x))))
#Visualize
ggplot(DaysPerID, aes(x=ID, y=Days)) +
geom_point(shape=19)
#Conclusion: Each ID conducts the experiment for a different number of days
######################################
library(ggplot2)
ggplot(DaysPerID, aes(x=ID, y=Days)) +
geom_point(shape=19)
#What time is the 'mood' asked to be rated?
moodData <- subset(newdata, (!is.na(newdata[, newdata$value.mood])))
ToDHours <- data.frame(moodData$time.of.day, moodData$hour)
ToDHours <- aggregate(x = ToDHours$moodData.hour, by = ToDHours["moodData.time.of.day"], sum)
colnames(ToDHours) <- c("Time_of_Day", "Total_Hours")
#Visualise
plot(ToDHours, type="h")
#not aggregated per day!
head(moodData$value.mood, n=10)
##Aggregate mood per day
#Choose relevant variables
aggMood <- moodData[, .(id ,value.mood, date)]
#Aggregate by id and day with #count
aggMood <- moodData[, .(mood_count = .N, mood_mean = mean(value.mood)),
by = .(id, date)]
#Visualise
#TODO (average mood per user, track mood per user over time, etc)
#average mood per user
idMood <- aggMood[, .(mood_mean = mean(mood_mean)),
by = .(id)]
idMood$id <- unlist(lapply(idMood$id, FUN = function(x) as.numeric(sub("AS14.", "", x))))
ggplot(data = idMood, mapping = aes(x = id, y = mood_mean)) +
geom_point(shape = 19)
# correlation matrix visualisation
ggcorr(aggData)
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
View(newdata)
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
newdata$count_value.appCat.builtin <- ifelse(is.na(newdata$value.appCat.builtin) == FALSE,
newdata$count_value.appCat.builtin <- 1,
newdata$count_value.appCat.builtin <- 0)
# Create variables number of times each
# application was open throughout the day
newdata$count_value.appCat.builtin <- ifelse(is.na(newdata$value.appCat.builtin) == FALSE,
newdata$count_value.appCat.builtin <- 1,
newdata$count_value.appCat.builtin <- 0)
newdata$count_value.appCat.communication <- ifelse(is.na(newdata$value.appCat.communication) == FALSE,
newdata$count_value.appCat.communication <- 1,
newdata$count_value.appCat.communication <- 0)
newdata$count_value.appCat.entertainment <- ifelse(is.na(newdata$value.appCat.entertainment) == FALSE,
newdata$count_value.appCat.entertainment <- 1,
newdata$count_value.appCat.entertainment <- 0)
newdata$count_value.appCat.finance <- ifelse(is.na(newdata$value.appCat.finance) == FALSE,
newdata$count_value.appCat.finance <- 1,
newdata$count_value.appCat.finance <- 0)
newdata$count_value.appCat.game <- ifelse(is.na(newdata$value.appCat.game) == FALSE,
newdata$count_value.appCat.game <- 1,
newdata$count_value.appCat.game <- 0)
newdata$count_value.appCat.office <- ifelse(is.na(newdata$value.appCat.office) == FALSE,
newdata$count_value.appCat.office <- 1,
newdata$count_value.appCat.office <- 0)
newdata$count_value.appCat.other <- ifelse(is.na(newdata$value.appCat.other) == FALSE,
newdata$count_value.appCat.other <- 1,
newdata$count_value.appCat.other <- 0)
newdata$count_value.appCat.social <- ifelse(is.na(newdata$value.appCat.social) == FALSE,
newdata$count_value.appCat.social <- 1,
newdata$count_value.appCat.social <- 0)
newdata$count_value.appCat.travel <- ifelse(is.na(newdata$value.appCat.travel) == FALSE,
newdata$count_value.appCat.travel <- 1,
newdata$count_value.appCat.travel <- 0)
newdata$count_value.appCat.unknown <- ifelse(is.na(newdata$value.appCat.unknown) == FALSE,
newdata$newdata$count_value.appCat.unknown <- 1,
newdata$newdata$count_value.appCat.unknown <- 0)
newdata$count_value.appCat.utilities <- ifelse(is.na(newdata$value.appCat.utilities) == FALSE,
newdata$newdata$count_value.appCat.utilities <- 1,
newdata$newdata$count_value.appCat.utilities <- 0)
newdata$count_value.appCat.weather <- ifelse(is.na(newdata$value.appCat.weather) == FALSE,
newdata$newdata$count_value.appCat.weather <- 1,
newdata$newdata$count_value.appCat.weather <- 0)
#####################################
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
newdata$count_value.appCat.builtin <- ifelse(is.na(newdata$value.appCat.builtin) == FALSE,
newdata$count_value.appCat.builtin <- 1,
newdata$count_value.appCat.builtin <- 0)
newdata$count_value.appCat.communication <- ifelse(is.na(newdata$value.appCat.communication) == FALSE,
newdata$count_value.appCat.communication <- 1,
newdata$count_value.appCat.communication <- 0)
newdata$count_value.appCat.entertainment <- ifelse(is.na(newdata$value.appCat.entertainment) == FALSE,
newdata$count_value.appCat.entertainment <- 1,
newdata$count_value.appCat.entertainment <- 0)
newdata$count_value.appCat.finance <- ifelse(is.na(newdata$value.appCat.finance) == FALSE,
newdata$count_value.appCat.finance <- 1,
newdata$count_value.appCat.finance <- 0)
newdata$count_value.appCat.game <- ifelse(is.na(newdata$value.appCat.game) == FALSE,
newdata$count_value.appCat.game <- 1,
newdata$count_value.appCat.game <- 0)
newdata$count_value.appCat.office <- ifelse(is.na(newdata$value.appCat.office) == FALSE,
newdata$count_value.appCat.office <- 1,
newdata$count_value.appCat.office <- 0)
newdata$count_value.appCat.other <- ifelse(is.na(newdata$value.appCat.other) == FALSE,
newdata$count_value.appCat.other <- 1,
newdata$count_value.appCat.other <- 0)
newdata$count_value.appCat.social <- ifelse(is.na(newdata$value.appCat.social) == FALSE,
newdata$count_value.appCat.social <- 1,
newdata$count_value.appCat.social <- 0)
newdata$count_value.appCat.travel <- ifelse(is.na(newdata$value.appCat.travel) == FALSE,
newdata$count_value.appCat.travel <- 1,
newdata$count_value.appCat.travel <- 0)
newdata$count_value.appCat.unknown <- ifelse(is.na(newdata$value.appCat.unknown) == FALSE,
newdata$count_value.appCat.unknown <- 1,
newdata$count_value.appCat.unknown <- 0)
newdata$count_value.appCat.utilities <- ifelse(is.na(newdata$value.appCat.utilities) == FALSE,
newdata$count_value.appCat.utilities <- 1,
newdata$count_value.appCat.utilities <- 0)
newdata$count_value.appCat.weather <- ifelse(is.na(newdata$value.appCat.weather) == FALSE,
newdata$count_value.appCat.weather <- 1,
newdata$count_value.appCat.weather <- 0)
View(newdata)
newdata$count <- 1
aggDay <- newdata[, .(count = .N,
mood.daily.mean = mean(value.mood),
value.circumplex.arousal = mean(value.circumplex.arousal),
value.circumplex.valence = mean(value.circumplex.valence),
value.activity = sum(value.activity),
value.screen = sum(value.screen)),
by = .(id, date)]
View(aggDay)
sum(!is.na(aggDay$mood.daily.mean))
# Aggregate data on by day and id.
aggData = newdata[, .(agg_mood = mean(value.mood, na.rm=TRUE),
agg_arousal = mean(value.circumplex.arousal, na.rm=TRUE),
agg_valence = mean(value.circumplex.valence, na.rm=TRUE),
agg_activity = mean(value.activity, na.rm=TRUE),
agg_screen = mean(value.screen, na.rm=TRUE),
agg_call = sum(value.call, na.rm=TRUE),
agg_sms = sum(value.sms, na.rm=TRUE),
agg_builtin = mean(value.appCat.builtin, na.rm=TRUE),
agg_communication = mean(value.appCat.communication, na.rm=TRUE),
agg_entertainment = mean(value.appCat.entertainment, na.rm=TRUE),
agg_finance = mean(value.appCat.finance, na.rm=TRUE),
agg_game = mean(value.appCat.game, na.rm=TRUE),
agg_office = mean(value.appCat.office, na.rm=TRUE),
agg_other = mean(value.appCat.other, na.rm=TRUE),
agg_social = mean(value.appCat.social, na.rm=TRUE),
agg_travel = mean(value.appCat.travel, na.rm=TRUE),
agg_unknown = mean(value.appCat.unknown, na.rm=TRUE),
agg_utilities = mean(value.appCat.utilities, na.rm=TRUE),
agg_weather = mean(value.appCat.weather, na.rm=TRUE)
), by = .(id, date)]
sum(is.na(aggData$agg_mood))
View(aggData)
######################################
# Aggregate data on by day and id.
aggData = newdata[, .(count = .N,
agg_mood = mean(value.mood, na.rm=TRUE),
agg_arousal = mean(value.circumplex.arousal, na.rm=TRUE),
agg_valence = mean(value.circumplex.valence, na.rm=TRUE),
agg_activity = mean(value.activity, na.rm=TRUE),
agg_screen = mean(value.screen, na.rm=TRUE),
agg_call = sum(value.call, na.rm=TRUE),
agg_sms = sum(value.sms, na.rm=TRUE),
agg_builtin = mean(value.appCat.builtin, na.rm=TRUE),
agg_communication = mean(value.appCat.communication, na.rm=TRUE),
agg_entertainment = mean(value.appCat.entertainment, na.rm=TRUE),
agg_finance = mean(value.appCat.finance, na.rm=TRUE),
agg_game = mean(value.appCat.game, na.rm=TRUE),
agg_office = mean(value.appCat.office, na.rm=TRUE),
agg_other = mean(value.appCat.other, na.rm=TRUE),
agg_social = mean(value.appCat.social, na.rm=TRUE),
agg_travel = mean(value.appCat.travel, na.rm=TRUE),
agg_unknown = mean(value.appCat.unknown, na.rm=TRUE),
agg_utilities = mean(value.appCat.utilities, na.rm=TRUE),
agg_weather = mean(value.appCat.weather, na.rm=TRUE)
), by = .(id, date)]
View(newdata)
View(aggData)
# Aggregate data on by day and id.
aggData = newdata[, .(count = .N,
agg_mood = mean(value.mood, na.rm=TRUE),
agg_arousal = mean(value.circumplex.arousal, na.rm=TRUE),
agg_valence = mean(value.circumplex.valence, na.rm=TRUE),
agg_activity = mean(value.activity, na.rm=TRUE),
agg_screen = mean(value.screen, na.rm=TRUE),
agg_call = sum(value.call, na.rm=TRUE),
agg_sms = sum(value.sms, na.rm=TRUE),
agg_builtin = mean(value.appCat.builtin, na.rm=TRUE),
agg_communication = mean(value.appCat.communication, na.rm=TRUE),
agg_entertainment = mean(value.appCat.entertainment, na.rm=TRUE),
agg_finance = mean(value.appCat.finance, na.rm=TRUE),
agg_game = mean(value.appCat.game, na.rm=TRUE),
agg_office = mean(value.appCat.office, na.rm=TRUE),
agg_other = mean(value.appCat.other, na.rm=TRUE),
agg_social = mean(value.appCat.social, na.rm=TRUE),
agg_travel = mean(value.appCat.travel, na.rm=TRUE),
agg_unknown = mean(value.appCat.unknown, na.rm=TRUE),
agg_utilities = mean(value.appCat.utilities, na.rm=TRUE),
agg_weather = mean(value.appCat.weather, na.rm=TRUE),
agg_count_builtin = sum(count_value.appCat.builtin, na.rm=TRUE),
agg_count_communication = sum(count_value.appCat.communication, na.rm=TRUE),
agg_count_entertainment = sum(count_value.appCat.entertainment, na.rm=TRUE),
agg_count_finance = sum(count_value.appCat.finance, na.rm=TRUE),
agg_count_game = sum(count_value.appCat.game, na.rm=TRUE),
agg_count_office = sum(count_value.appCat.office, na.rm=TRUE),
agg_count_other = sum(count_value.appCat.other, na.rm=TRUE),
agg_count_social = sum(count_value.appCat.social, na.rm=TRUE),
agg_count_travel = sum(count_value.appCat.travel, na.rm=TRUE),
agg_count_unknown = sum(count_value.appCat.unknown, na.rm=TRUE),
agg_count_utilities = sum(count_value.appCat.utilities, na.rm=TRUE),
agg_count_weather = sum(count_value.appCat.weather, na.rm=TRUE)),
by = .(id, date)]
View(aggData)
cor(newdata)
cor(aggData[is.numeric(aggData)])
cor(aggData[is.numeric(aggData)], use = "na.or.complete")
aggData$week.day <- weekdays(aggData$date)
aggData$weekday <- weekdays(aggData$date)
aggData$week.day <- NULL
t = [1, 2, ]
t = [1, 2]
t = (1, 2)
t = c(1, 2)
unique(t)
count(unique(t))
size(unique(t))
length(unique(t))
# Count number of different applications used per day
aggData[,`:=` (different_apps = apply(.SD, 1, unique)),
by = .(id, date),
.SDcols = c("agg_builtin", "agg_communication", "agg_entertainment", "agg_finance", "agg_game",
"agg_office", "agg_other", "agg_social", "agg_travel", "agg_unknown", "agg_utilities",
"agg_weather")]
