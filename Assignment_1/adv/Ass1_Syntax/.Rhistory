install.packages("data.table")
library(data.table)
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA", " ", ))
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA", " "))
View(Mood)
str(Mood)
Mood$V1 <- NULL
str(Mood)
Mood$value
Mood$value[5443]
Mood$value[54432]
Mood$value[54432] + 1
summary(Mood)
View(Mood)
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA", " "), dec = c("."))
str(Mood)
summary(Mood)
test <- sort(Mood$value)
newdata <- Mood[order(value),]
rm(test)
View(newdata)
newdata$value[1] + 100
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
newdata <- Mood[order(value),]
View(newdata)
summary(newdata)
rm(newdata)
Mood$V1 <- NULL
summary(Mood)
newdata <- melt.data.table(Mood, id.vars = "variable")
View(newdata)
unique(Mood$variable)
varying_ <- unique(Mood$variable)
summary(Mood)
newdata <- reshape(Mood, varying = varying_, timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
View(newdata)
unique(newdata$id)
sum(is.na(newdata$value.mood))
library(lubridate)
newdata$time <- as_date(newdata$time)
View(newdata)
newdata$time[1]
hour(newdata$time[1])
rm(list = ls())
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
newdata$converted.time <-  as_datetime(newdata$time)
newdata$date <- as_date(newdata$time)
hour(newdata$converted.time)
newdata$time.of.day <- hour(newdata$converted.time)
if (newdata$time.of.day <= 12)
ifelse(newdata$hour <= 12,
newdata$time.of.day <- "morning",
ifelse(newdata$hour <= 18,
newdata$time.of.day <- "afternoon",
newdata$time.of.day <- "evening"))
newdata$hour <- hour(newdata$converted.time)
ifelse(newdata$hour <= 12,
newdata$time.of.day <- "morning",
ifelse(newdata$hour <= 18,
newdata$time.of.day <- "afternoon",
newdata$time.of.day <- "evening"))
newdata$time.of.day <- NULL
ifelse(newdata$hour <= 12,
newdata$time.of.day <- "morning",
ifelse(newdata$hour <= 18,
newdata$time.of.day <- "afternoon",
newdata$time.of.day <- "evening"))
newdata$hour
summary(newdata$hour)
if(newdata$hour <= 6) {
newdata$time.of.day <- "dawn"
} else if (newdata$hour > 6 && newdata$hour <= 12){
newdata$time.of.day <- "morning"
} else if (newdata$hour > 12 && newdata$hour <= 18){
newdata$time.of.day <- "afternoon"
} else if (newdata$hour > 18 && newdata$hour <= 24){
newdata$time.of.day <- "evening"
}
newdata$time.of.day <- ifelse(newdata$hour <= 6, "dawn",
ifelse(newdata$hour <= 12 & newdata$hour >6, "morning"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour <= 12 & newdata$hour >6, newdata$time.of.day <- "morning"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour <= 12 & newdata$hour >6, newdata$time.of.day <- "morning", "NA"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour <= 12 && newdata$hour >6, newdata$time.of.day <- "morning", "NA"))
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn", "NA")
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn", newdata$time.of.day <- "NA")
summary(newdata$time.of.day)
table(newdata$time.of.day)
#Use hour of the day to define time of the day
ifelse(newdata$hour <= 6, newdata$time.of.day <- "dawn",
ifelse(newdata$hour > 6 & newdata$hour <= 12, newdata$time.of.day <- "morning", newdata$time.of.day <- "NA" ))
newdata$time.of.day <- NULL
newdata[newdata$hour < 6]
newdata$time.of.day[newdata$hour < 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 && newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
table(newdata$time.of.day)
summary(newdata$time.of.day)
str(newdata$time.of.day)
newdata <- newdata[order(id, date),]
View(newdata)
table(newdata$id, newdata$date)
unique(newdata$date)
unique(newdata$date[which(newdata$id == "AS14.01")])
count(unique(newdata$date[which(newdata$id == "AS14.01")]))
sum((unique(newdata$date[which(newdata$id == "AS14.01")])))
length(unique(newdata$date[which(newdata$id == "AS14.01")]))
unique(newdata$id)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id)
}
View(DaysPerID)
DaysPerID <- data.frame(character(10), numeric(3), stringsAsFactors = FALSE)
DaysPerID <- data.frame(character(10), numeric(10), stringsAsFactors = FALSE)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id)
}
as.data.frame(DaysPerID)
View(DaysPerID)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
id_ <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, id_)
}
View(DaysPerID)
#how many days each "subject" is analysed
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 0)
}
View(DaysPerID)
plot(DaysPerID[,1], DaysPerID[,2])
#how many days each "subject" is analysed
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 2)
}
############
View(DaysPerID)
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 1)
}
######################################
plot(DaysPerID[,1], DaysPerID[,2])
View(DaysPerID)
plot(DaysPerID[,2])
rm(list=ls(all=TRUE))
