Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
######################################
#####################################
#Install packages, if not available
# install.packages("data.table")
# install.packages("lubridate")
######################################
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
View(newdata)
newdata$weekday <- weekdays(newdata$date)
View(newdata)
rm(list = [])
rm(list = all())
rm(list = ls())
clc
clc <- function() cat(rep("\n", 50))
clc
clc <- function( cat(rep("\n", 50)))
clc <- function() {cat(rep("\n", 50))}
clc
rm(list = ls())
######################################
#Load packages
library(data.table)
library(lubridate)
######################################
######################################
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
######################################
#EXPLORATORY ANALYSIS (MOOD)
######################################
#for how many days each "subject" is tracked
DaysPerID <- c()
for (id_ in unique(newdata$id)) {
n_days <- length(unique(newdata$date[which(newdata$id == id_)]))
new_id <- c(id_, n_days)
DaysPerID <- rbind(DaysPerID, new_id, deparse.level = 0)
}
#Visualise
#TODO
#Conclusion: Each ID conducts the experiment for a different number of days
######################################
######################################
#What time is the 'mood' asked to be rated?
moodData <- subset(newdata, (!is.na(newdata[, newdata$value.mood])))
table(moodData$hour)
table(moodData$time.of.day)
#Visualise
#TODO
#Conclusion: No fixed hours for app to request user to rate 'mood'
######################################
######################################
#Distribution of mood
#not aggregated per day!
table(moodData$value.mood)
##Aggregate mood per day
#Choose relevant variables
aggMood <- moodData[, .(id ,value.mood, date)]
#Aggregate by id and day with #count
aggMood <- moodData[, .(mood_count = .N, mood_mean = mean(value.mood)),
by = .(id, date)]
#Visualise
#TODO (average mood per user, track mood per user over time, etcâ€¦)
#average mood per user
idMood <- aggMood[, .(mood_mean = mean(mood_mean)),
by = .(id)]
######################################
######################################
#Total number of days the dataset was collected
max(moodData$date) - min(moodData$date)
######################################
View(moodData)
View(moodData)
View(moodData)
MoodBench <- moodData[, list(id, value.mood, date, time.of.day, week.day)]
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
View(MoodBench)
aggMoodDay <- MoodBench[, .(mood.daily.mean = mean(value.mood)),
by = .(id, date)]
View(aggMoodDay)
View(aggMood)
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
View(aggMoodDay)
View(aggMoodDay)
View(aggMoodDay)
rm(aggMood)
rm(DaysPerID)
aggMoodDay <- aggMoodDay[, (lag.mood) :=  shift(mood.daily.mean), by = id]
aggMoodDay <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id]
View(aggMoodDay)
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
aggMoodDay$lag.mood <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id]
View(aggMoodDay)
aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id]
test = aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id]
View(test)
View(test[2])
View(test[, 2])
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
aggMoodDay$lag.mood <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id][, 2]
View(aggMoodDay)
View(MoodBench)
View(aggMoodDay)
aggMoodDay$lag.mood2 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 2)),
by = id][, 2]
View(aggMoodDay)
View(aggMoodDay)
View(aggMoodDay)
aggMoodDay$average2days <- aggMoodDay[mean.2.days = apply(.SD, 1, mean),
by = id, .SDcols = c("lag.mood", "lag.mood2")]
aggMoodDay$average2days <- aggMoodDay[,`:=` (mean.2.days = apply(.SD, 1, mean)),
by = id, .SDcols = c("lag.mood", "lag.mood2")]
View(aggMoodDay)
######################################
#Select only relevant variables for benchmark model
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
#Aggregate by day, taking the daily average of mood
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
######################################
######################################
#BENCHMARK MODEL 1 - Predict mood of next
#day by saying it is equal to the previous day.
#Lag mood variable
aggMoodDay$lag.mood <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id][, 2]
#TODO
#Split training/test data
#Evaluate with e.g. RMSE
######################################
######################################
#BENCHMARK MODEL 2 - Predict mood of next day by taking
#the average for previous N days.
aggMoodDay$lag.mood2 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 2)),
by = id][, 2]
aggMoodDay[,`:=` (mean.2.days = apply(.SD, 1, mean)),
by = id, .SDcols = c("lag.mood", "lag.mood2")]
View(aggMoodDay)
aggMoodDay$lag.mood2 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 2)),
by = id][, 2]
aggMoodDay$lag.mood3 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 3)),
by = id][, 2]
aggMoodDay$lag.mood4 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 4)),
by = id][, 2]
aggMoodDay$lag.mood5 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 5)),
by = id][, 2]
aggMoodDay$lag.mood6 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 6)),
by = id][, 2]
aggMoodDay$lag.mood7 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 7)),
by = id][, 2]
aggMoodDay[,`:=` (mean.7.previoudays = apply(.SD, 1, mean)),
by = id,
.SDcols = c("lag.mood", "lag.mood2", "lag.mood3", "lag.mood4", "lag.mood5", "lag.mood6", "lag.mood7")]
View(aggMoodDay)
N <- 7
take_average <- function(N) {
for (i in 1:N){
print (i)
}
}
take_average(N)
N <- 7
take_average <- function(N) {
#loop through lags and create them
variables <- c()
for (i in 1:N){
currentVariable <- as.name(paste("lag.mood", i, sep = ""))
print (currentVariable)
#aggMoodDay$currentVariable
}
}
take_average(7)
#####################################
#Select only relevant variables for benchmark model
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
#Aggregate by day, taking the daily average of mood
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
######################################
######################################
#BENCHMARK MODEL 1 - Predict mood of next
#day by saying it is equal to the previous day.
#Lag mood variable
aggMoodDay$lag.mood <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id][, 2]
######################################
#Select only relevant variables for benchmark model
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
#Aggregate by day, taking the daily average of mood
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
######################################
N <- 7
take_average <- function(N) {
#loop through lags and create them
variables <- c()
for (i in 1:N){
currentVariable <- as.name(paste("lag.mood", i, sep = ""))
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
variables <- c(variables, currentVariable)
}
}
View(aggMoodDay)
take_average(2)
View(aggMoodDay)
aggMoodDay$lag.mood2 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 2)),
by = id][, 2]
aggMoodDay$lag.mood3 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 3)),
by = id][, 2]
aggMoodDay$lag.mood4 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 4)),
by = id][, 2]
aggMoodDay$lag.mood5 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 5)),
by = id][, 2]
aggMoodDay$lag.mood6 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 6)),
by = id][, 2]
aggMoodDay$lag.mood7 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 7)),
by = id][, 2]
aggMoodDay[,`:=` (mean.7.previoudays = apply(.SD, 1, mean)),
by = id,
.SDcols = c("lag.mood", "lag.mood2", "lag.mood3", "lag.mood4", "lag.mood5", "lag.mood6", "lag.mood7")]
#####################################
#Select only relevant variables for benchmark model
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
#Aggregate by day, taking the daily average of mood
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
######################################
######################################
#BENCHMARK MODEL 1 - Predict mood of next
#day by saying it is equal to the previous day.
#Lag mood variable
aggMoodDay$lag.mood <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id][, 2]
#TODO
#Split training/test data
#Evaluate with e.g. RMSE
######################################
#BENCHMARK MODEL 2 - Predict mood of next day by taking
#the average for the previous 7 days.
aggMoodDay$lag.mood2 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 2)),
by = id][, 2]
aggMoodDay$lag.mood3 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 3)),
by = id][, 2]
aggMoodDay$lag.mood4 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 4)),
by = id][, 2]
aggMoodDay$lag.mood5 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 5)),
by = id][, 2]
aggMoodDay$lag.mood6 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 6)),
by = id][, 2]
aggMoodDay$lag.mood7 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 7)),
by = id][, 2]
aggMoodDay[,`:=` (mean.7.previoudays = apply(.SD, 1, mean)),
by = id,
.SDcols = c("lag.mood", "lag.mood2", "lag.mood3", "lag.mood4", "lag.mood5", "lag.mood6", "lag.mood7")]
View(aggMoodDay)
#the average for the previous 7 days.
aggMoodDay$lag.mood1 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 1)),
by = id][, 2]
aggMoodDay$lag.mood2 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 2)),
by = id][, 2]
aggMoodDay$lag.mood3 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 3)),
by = id][, 2]
aggMoodDay$lag.mood4 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 4)),
by = id][, 2]
aggMoodDay$lag.mood5 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 5)),
by = id][, 2]
aggMoodDay$lag.mood6 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 6)),
by = id][, 2]
aggMoodDay$lag.mood7 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 7)),
by = id][, 2]
aggMoodDay[,`:=` (mean.7.previoudays = apply(.SD, 1, mean)),
by = id,
.SDcols = c("lag.mood1", "lag.mood2", "lag.mood3", "lag.mood4", "lag.mood5", "lag.mood6", "lag.mood7")]
View(aggMoodDay)
#Select only relevant variables for benchmark model
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
#Aggregate by day, taking the daily average of mood
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
aggMoodDay$lag.mood <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean)), by = id][, 2]
rmse(aggMoodDay$mood.daily.mean, aggMoodDay$lag.mood)
library(ModelMetrics)
rmse(aggMoodDay$mood.daily.mean, aggMoodDay$lag.mood)
aggMoodDayTest <- subset(aggMoodDay, (!is.na(aggMoodDay[, aggMoodDay$lag.mood])))
rmse(aggMoodDayTest$mood.daily.mean, aggMoodDayTest$lag.mood)
#the average for the previous 7 days.
aggMoodDay$lag.mood1 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 1)),
by = id][, 2]
aggMoodDay$lag.mood2 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 2)),
by = id][, 2]
aggMoodDay$lag.mood3 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 3)),
by = id][, 2]
aggMoodDay$lag.mood4 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 4)),
by = id][, 2]
aggMoodDay$lag.mood5 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 5)),
by = id][, 2]
aggMoodDay$lag.mood6 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 6)),
by = id][, 2]
aggMoodDay$lag.mood7 <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = 7)),
by = id][, 2]
aggMoodDay[,`:=` (mean.7.previousdays = apply(.SD, 1, mean)),
by = id,
.SDcols = c("lag.mood1", "lag.mood2", "lag.mood3", "lag.mood4", "lag.mood5", "lag.mood6", "lag.mood7")]
aggMoodDayTest <- subset(aggMoodDay, (!is.na(aggMoodDay[, aggMoodDay$lag.mood])))
rmse(aggMoodDayTest$mood.daily.mean, aggMoodDayTest$lag.mood)
rmse(aggMoodDayTest$mood.daily.mean, aggMoodDayTest$mean.7.previousdays)
aggMoodDayTest <- subset(aggMoodDay, (!is.na(aggMoodDay[, aggMoodDay$mean.7.previousdays])))
rmse(aggMoodDayTest$mood.daily.mean, aggMoodDayTest$mean.7.previousdays)
View(take_average)
######################################
#Select only relevant variables for benchmark model
MoodBench <- moodData[, .(id, value.mood, date, time.of.day, week.day)]
#Aggregate by day, taking the daily average of mood
aggMoodDay <- MoodBench[, .(mood_count = .N, mood.daily.mean = mean(value.mood)),
by = .(id, date)]
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- as.name(paste("lag.mood", i, sep = ""))
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
variables <- c(variables, currentVariable)
}
}
take_average(7)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- as.name(paste("lag.mood", i, sep = ""))
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
}
take_average(7)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- paste("lag.mood", i, sep = "")
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
}
take_average(7)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- paste("lag.mood", i, sep = "")
aggMoodDay$currentVariable <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
return (variables)
}
v = take_average(7)
v
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- paste("lag.mood", i, sep = "")
aggMoodDay[, currentVariable] <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
return (variables)
}
v = take_average(7)
View(aggMoodDay)
take_average <- function(N) {
#save names of the new created variables
variables <- c()
#loop through lags and create them
for (i in 1:N){
currentVariable <- as.name(paste("lag.mood", i, sep = ""))
aggMoodDay[, currentVariable] <- aggMoodDay[, .(lag.mood =  shift(mood.daily.mean, n = i)),
by = id][, 2]
print(currentVariable)
variables <- c(variables, currentVariable)
}
return (variables)
}
v = take_average(7)
rm(list = ls())
