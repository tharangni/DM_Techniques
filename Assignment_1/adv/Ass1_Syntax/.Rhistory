agg_count_unknown = sum(count_value.appCat.unknown, na.rm=TRUE),
agg_count_utilities = sum(count_value.appCat.utilities, na.rm=TRUE),
agg_count_weather = sum(count_value.appCat.weather, na.rm=TRUE)),
by = .(id, date)]
View(aggData)
cor(newdata)
cor(aggData[is.numeric(aggData)])
cor(aggData[is.numeric(aggData)], use = "na.or.complete")
aggData$week.day <- weekdays(aggData$date)
aggData$weekday <- weekdays(aggData$date)
aggData$week.day <- NULL
t = [1, 2, ]
t = [1, 2]
t = (1, 2)
t = c(1, 2)
unique(t)
count(unique(t))
size(unique(t))
length(unique(t))
# Count number of different applications used per day
aggData[,`:=` (different_apps = apply(.SD, 1, unique)),
by = .(id, date),
.SDcols = c("agg_builtin", "agg_communication", "agg_entertainment", "agg_finance", "agg_game",
"agg_office", "agg_other", "agg_social", "agg_travel", "agg_unknown", "agg_utilities",
"agg_weather")]
######################################
#Load packages
library(data.table)
library(lubridate)
library(ggplot2)
library(GGally)
######################################
installed.packages(‘GGally’)
installed.packages("GGally")
library(ggplot2)
#Load data
Mood <- fread("../dataset_mood_smartphone.csv", na.strings = c("NA"), dec = c("."))
######################################
######################################
#Delete useless variables
# T: I don't think V1 is useless as the values start differing with the serial
# number from count '143507' onwards. So this part needs be reasoned why you
# think it needs to be deleted if you still think it's useless.
# K: Because it is a subset of the original dataset.
Mood$V1 <- NULL
######################################
######################################
#Check out data
str(Mood)
summary(Mood)
#Matches from what is in Excel
######################################
######################################
#Reshape Data
newdata <- reshape(Mood,
timevar = "variable",
idvar = c("id", "time"),
direction = "wide")
######################################
######################################
#Define variable as "time" format - full date and time
newdata$converted.time <- as_datetime(newdata$time)
#Define date variable
newdata$date <- as_date(newdata$time)
#Define hour variable (hour of the day)
newdata$hour <- hour(newdata$converted.time)
#Use hour of the day to define time of day
newdata$time.of.day[newdata$hour <= 6] <- "dawn"
newdata$time.of.day[newdata$hour > 6 & newdata$hour <= 12] <- "morning"
newdata$time.of.day[newdata$hour > 12 & newdata$hour <= 18] <- "afternoon"
newdata$time.of.day[newdata$hour > 18 & newdata$hour <= 24] <- "evening"
#Add Weekday
newdata$week.day <- weekdays(newdata$date)
######################################
######################################
#Sort by id and date
newdata <- newdata[order(id, converted.time),]
######################################
#Add nth day into newdata (column)
min_day <- as.numeric(min(newdata$date))
newdata$nth_day <- as.numeric(unlist(lapply(X = as.numeric(newdata$date), FUN = function(x) x+1-min_day)))
View(newdata)
rm(min_day)
######################################
#AGGREGATE DATA (DAILY LEVEL)
#make sure that newdata is loaded in environment - from ReadData.R
#This syntax:
# - creates interesting variables
# - aggregates the data
# - prepares the data for modelling
######################################
######################################
# Create variables number of times each
# application was open throughout the day (use the sum in aggregation to get this value).
newdata$count_value.appCat.builtin <- ifelse(is.na(newdata$value.appCat.builtin) == FALSE,
newdata$count_value.appCat.builtin <- 1,
newdata$count_value.appCat.builtin <- 0)
newdata$count_value.appCat.communication <- ifelse(is.na(newdata$value.appCat.communication) == FALSE,
newdata$count_value.appCat.communication <- 1,
newdata$count_value.appCat.communication <- 0)
newdata$count_value.appCat.entertainment <- ifelse(is.na(newdata$value.appCat.entertainment) == FALSE,
newdata$count_value.appCat.entertainment <- 1,
newdata$count_value.appCat.entertainment <- 0)
newdata$count_value.appCat.finance <- ifelse(is.na(newdata$value.appCat.finance) == FALSE,
newdata$count_value.appCat.finance <- 1,
newdata$count_value.appCat.finance <- 0)
newdata$count_value.appCat.game <- ifelse(is.na(newdata$value.appCat.game) == FALSE,
newdata$count_value.appCat.game <- 1,
newdata$count_value.appCat.game <- 0)
newdata$count_value.appCat.office <- ifelse(is.na(newdata$value.appCat.office) == FALSE,
newdata$count_value.appCat.office <- 1,
newdata$count_value.appCat.office <- 0)
newdata$count_value.appCat.other <- ifelse(is.na(newdata$value.appCat.other) == FALSE,
newdata$count_value.appCat.other <- 1,
newdata$count_value.appCat.other <- 0)
newdata$count_value.appCat.social <- ifelse(is.na(newdata$value.appCat.social) == FALSE,
newdata$count_value.appCat.social <- 1,
newdata$count_value.appCat.social <- 0)
newdata$count_value.appCat.travel <- ifelse(is.na(newdata$value.appCat.travel) == FALSE,
newdata$count_value.appCat.travel <- 1,
newdata$count_value.appCat.travel <- 0)
newdata$count_value.appCat.unknown <- ifelse(is.na(newdata$value.appCat.unknown) == FALSE,
newdata$count_value.appCat.unknown <- 1,
newdata$count_value.appCat.unknown <- 0)
newdata$count_value.appCat.utilities <- ifelse(is.na(newdata$value.appCat.utilities) == FALSE,
newdata$count_value.appCat.utilities <- 1,
newdata$count_value.appCat.utilities <- 0)
newdata$count_value.appCat.weather <- ifelse(is.na(newdata$value.appCat.weather) == FALSE,
newdata$count_value.appCat.weather <- 1,
newdata$count_value.appCat.weather <- 0)
######################################
######################################
# Aggregate data on by day and id.
aggData = newdata[, .(count = .N,
agg_mood = mean(value.mood, na.rm=TRUE),
agg_arousal = mean(value.circumplex.arousal, na.rm=TRUE),
agg_valence = mean(value.circumplex.valence, na.rm=TRUE),
agg_activity = mean(value.activity, na.rm=TRUE),
agg_screen = mean(value.screen, na.rm=TRUE),
agg_call = sum(value.call, na.rm=TRUE),
agg_sms = sum(value.sms, na.rm=TRUE),
agg_builtin = mean(value.appCat.builtin, na.rm=TRUE),
agg_communication = mean(value.appCat.communication, na.rm=TRUE),
agg_entertainment = mean(value.appCat.entertainment, na.rm=TRUE),
agg_finance = mean(value.appCat.finance, na.rm=TRUE),
agg_game = mean(value.appCat.game, na.rm=TRUE),
agg_office = mean(value.appCat.office, na.rm=TRUE),
agg_other = mean(value.appCat.other, na.rm=TRUE),
agg_social = mean(value.appCat.social, na.rm=TRUE),
agg_travel = mean(value.appCat.travel, na.rm=TRUE),
agg_unknown = mean(value.appCat.unknown, na.rm=TRUE),
agg_utilities = mean(value.appCat.utilities, na.rm=TRUE),
agg_weather = mean(value.appCat.weather, na.rm=TRUE),
agg_count_builtin = sum(count_value.appCat.builtin, na.rm=TRUE),
agg_count_communication = sum(count_value.appCat.communication, na.rm=TRUE),
agg_count_entertainment = sum(count_value.appCat.entertainment, na.rm=TRUE),
agg_count_finance = sum(count_value.appCat.finance, na.rm=TRUE),
agg_count_game = sum(count_value.appCat.game, na.rm=TRUE),
agg_count_office = sum(count_value.appCat.office, na.rm=TRUE),
agg_count_other = sum(count_value.appCat.other, na.rm=TRUE),
agg_count_social = sum(count_value.appCat.social, na.rm=TRUE),
agg_count_travel = sum(count_value.appCat.travel, na.rm=TRUE),
agg_count_unknown = sum(count_value.appCat.unknown, na.rm=TRUE),
agg_count_utilities = sum(count_value.appCat.utilities, na.rm=TRUE),
agg_count_weather = sum(count_value.appCat.weather, na.rm=TRUE)),
by = .(id, date)]
######################################
# Include more interesting variables
validData <- subset(aggData, (!is.nan(aggData[, aggData$agg_mood])))
# Add weekday
aggData$weekday <- weekdays(aggData$date)
# Count number of different applications used per day
# temp <- aggData[aggData$id == "AS14.17"]
# Columns from 11-22 store app data
validData$open_count <- validData[,apply(X = validData[, 11:22], MARGIN = 1, FUN = function(x) sum(!is.nan(x)))]
rm(aggData)
rm(validData)
######################################
# Aggregate data on by day and id.
aggData = newdata[, .(count = .N,
agg_mood = mean(value.mood, na.rm=TRUE),
agg_arousal = mean(value.circumplex.arousal, na.rm=TRUE),
agg_valence = mean(value.circumplex.valence, na.rm=TRUE),
agg_activity = mean(value.activity, na.rm=TRUE),
agg_screen = mean(value.screen, na.rm=TRUE),
agg_call = sum(value.call, na.rm=TRUE),
agg_sms = sum(value.sms, na.rm=TRUE),
agg_builtin = mean(value.appCat.builtin, na.rm=TRUE),
agg_communication = mean(value.appCat.communication, na.rm=TRUE),
agg_entertainment = mean(value.appCat.entertainment, na.rm=TRUE),
agg_finance = mean(value.appCat.finance, na.rm=TRUE),
agg_game = mean(value.appCat.game, na.rm=TRUE),
agg_office = mean(value.appCat.office, na.rm=TRUE),
agg_other = mean(value.appCat.other, na.rm=TRUE),
agg_social = mean(value.appCat.social, na.rm=TRUE),
agg_travel = mean(value.appCat.travel, na.rm=TRUE),
agg_unknown = mean(value.appCat.unknown, na.rm=TRUE),
agg_utilities = mean(value.appCat.utilities, na.rm=TRUE),
agg_weather = mean(value.appCat.weather, na.rm=TRUE),
agg_count_builtin = sum(count_value.appCat.builtin, na.rm=TRUE),
agg_count_communication = sum(count_value.appCat.communication, na.rm=TRUE),
agg_count_entertainment = sum(count_value.appCat.entertainment, na.rm=TRUE),
agg_count_finance = sum(count_value.appCat.finance, na.rm=TRUE),
agg_count_game = sum(count_value.appCat.game, na.rm=TRUE),
agg_count_office = sum(count_value.appCat.office, na.rm=TRUE),
agg_count_other = sum(count_value.appCat.other, na.rm=TRUE),
agg_count_social = sum(count_value.appCat.social, na.rm=TRUE),
agg_count_travel = sum(count_value.appCat.travel, na.rm=TRUE),
agg_count_unknown = sum(count_value.appCat.unknown, na.rm=TRUE),
agg_count_utilities = sum(count_value.appCat.utilities, na.rm=TRUE),
agg_count_weather = sum(count_value.appCat.weather, na.rm=TRUE)),
by = .(id, date)]
######################################
aggData$weekday <- weekdays(aggData$date)
aggData$open_count <- aggData[,apply(X = aggData[, 11:22], MARGIN = 1, FUN = function(x) sum(!is.nan(x)))]
View(aggData)
View(aggData)
sum(aggData$count)
validData <- subset(aggData, (!is.nan(aggData[, aggData$agg_mood]) & !is.nan(aggData[, aggData$agg_screen]) ))
View(validData)
validData <- subset(aggData, (!is.nan(aggData[, aggData$agg_mood]) | !is.nan(aggData[, aggData$agg_screen]) ))
View(validData)
install.packages("zoo")
library(zoo)
na.approx(validData, x = validData$agg_mood, na.rm = FALSE)
View(validData)
na.approx(validData$agg_mood, na.rm = FALSE)
validData$mood_interp <- na.approx(validData$agg_mood, na.rm = FALSE)
View(validData)
validData$interp_mood <- na.approx(validData$agg_mood, na.rm = FALSE)
validData$interp_arousal <- na.approx(validData$agg_arousal, na.rm = FALSE)
validData$interp_valence <- na.approx(validData$agg_valence, na.rm = FALSE)
View(validData)
#Visualise correlations
ggcorr(data = validData, label = TRUE, label_alpha = TRUE, label_size = 2.5, label_round = 2,
hjust = 1, size = 3)
library(ggplot2)
ggcorr(data = validData, label = TRUE, label_alpha = TRUE, label_size = 2.5, label_round = 2,
hjust = 1, size = 3)
library(GGally)
install.packages("GGally")
ggcorr(data = validData, label = TRUE, label_alpha = TRUE, label_size = 2.5, label_round = 2,
hjust = 1, size = 3)
install.packages("ggplot2")
install.packages("ggplot2")
ggcorr(data = validData, label = TRUE, label_alpha = TRUE, label_size = 2.5, label_round = 2,
hjust = 1, size = 3)
library(GGally)
ggcorr(data = validData, label = TRUE, label_alpha = TRUE, label_size = 2.5, label_round = 2,
hjust = 1, size = 3)
#remove non interpolated variables
validData$agg_mood <- NULL
validData$agg_arousal <- NULL
validData$agg_valence <- NULL
#Visualise correlations
ggcorr(data = validData, label = TRUE, label_alpha = TRUE, label_size = 2.5, label_round = 2,
hjust = 1, size = 3)
validData$mood_interp <- NULL
unique(aggData$id)
view(aggData[which(aggData$id == "AS14.01"), ]
view(aggData[which(aggData$id == "AS14.01"), ]
view(aggData[which(aggData$id == "AS14.01"), ])
temp <- (aggData[which(aggData$id == "AS14.01"), ]
temp <- (aggData[which(aggData$id == "AS14.01"), ]
temp <- aggData[which(aggData$id == "AS14.01"), ]
View(temp)
temp <- validData[which(aggData$id == "AS14.01"), ]
temp <- validData[which(validData$id == "AS14.01"), ]
View(temp)
temp2 <- validData[which(validData$id == "AS14.02"), ]
conc <- rbind(temp, temp2)
View(conc)
source("./Helper_Functions.R")
SplitData <- splitdata_id(validData)
SplitData
SplitData[1]
temp <- SplitData[1]
temp <- SplitData[[1]]
View(temp)
View(validData)
temp <- temp[order(id, date),]
View(temp)
count(temp[which(temp$id == "AS14.01")]
count(temp[which(temp$id == "AS14.01")]
length(temp[which(temp$id == "AS14.01")])
length(validData[which(validData$id == "AS14.01")])
length(validData[which(validData$id == "AS14.22")])
length(temp[which(temp$id == "AS14.22")])
SplitData <- splitdata_id(validData)
source("./Helper_Functions.R")
SplitData <- splitdata_id(validData)
source("./Helper_Functions.R")
SplitData <- splitdata_id(validData)
seq.int(3)
source("./Helper_Functions.R")
SplitData <- splitdata_id(validData)
source("./Helper_Functions.R")
SplitData <- splitdata_id(validData)
source("./Helper_Functions.R")
SplitData <- splitdata_id(validData)
source("./Helper_Functions.R")
######################################
#Exclude data with missing Mood
PreData <- subset(aggData, (!is.nan(aggData[, aggData$agg_mood]) | !is.nan(aggData[, aggData$agg_screen]) ))
######################################
######################################
#Interpolate missing values for mood, arousal and valence
PreData$interp_mood <- na.approx(PreData$agg_mood, na.rm = FALSE)
PreData$interp_arousal <- na.approx(PreData$agg_arousal, na.rm = FALSE)
PreData$interp_valence <- na.approx(PreData$agg_valence, na.rm = FALSE)
#remove non interpolated variables
PreData$agg_mood <- NULL
PreData$agg_arousal <- NULL
PreData$agg_valence <- NULL
######################################
######################################
#Visualise correlations
ggcorr(data = PreData, label = TRUE, label_alpha = TRUE, label_size = 2.5, label_round = 2,
hjust = 1, size = 3)
SplitData <- splitdata_id(PreData)
trainData <- SplitData[[1]]
validData <- SplitData[[2]]
testData <- SplitData[[3]]
source("./Helper_Functions.R")
SplitData <- splitdata_id(PreData)
trainData <- SplitData[[1]]
validData <- SplitData[[2]]
testData <- SplitData[[3]]
View(testData)
View(validData)
View(testData)
View(trainData)
View(newdata)
View(PreData)
View(validData)
View(PreData)
TimeSeriesData <- PreData[, .(id, date, interp_mood)]
View(TimeSeriesData)
SplitData <- splitdata_id(TimeSeriesData)
trainData <- rbind(SplitData[[1]], SplitData[[2]])
testData <- SplitData[[3]]
source("./Helper_Functions.R")
SplitData <- splitdata_id(TimeSeriesData)
trainData <- rbind(SplitData[[1]], SplitData[[2]])
testData <- SplitData[[3]]
library(forecast)
View(trainData)
test <- trainData[which(trainData$id == "AS14.01"), ]
View(test)
test <- ts(test)
test
test <- trainData[which(trainData$id == "AS14.01"), c("date", "interp_mood")]
View(test)
test <- ts(test)
test
as.Date(test[, 1])
length(test)
length(test, x = 1)
test <- ts(data = test, start = test[1,1])
View(temp)
rm(temp)
rm(temp2)
test
View(PreData)
summary(PreData$date)
TimeSeriesData$date <- as.Date(TimeSeriesData$date)
SplitData <- splitdata_id(TimeSeriesData)
trainData <- rbind(SplitData[[1]], SplitData[[2]])
testData <- SplitData[[3]]
test <- trainData[which(trainData$id == "AS14.01"), c("date", "interp_mood")]
test <- ts(data = test, start = test[1,1])
test <- ts(data =  as.data.frame(test), start = test[1,1])
test <- trainData[which(trainData$id == "AS14.01"), c("date", "interp_mood")]
test
test <- ts(data =  as.data.frame(test), start = test[1,1])
test <- ts(data =  as.data.frame(test))
test
summary(test)
summary(as.date(test[, 1]))
summary(as.Date(test[, 1]))
test <- ts(data =  as.data.frame(test), start = 1)
test
test <- trainData[which(trainData$id == "AS14.01"), c("interp_mood")]
test <- ts(data =  as.data.frame(test), start = 1)
test
plot(test)
plot(log10(test))
plot(diff(test))
plot(diff(diff(test)))
HoltWinters(test)
test <- trainData[which(trainData$id == "AS14.01"), c("date", "interp_mood")]
test <- ts(data =  as.data.frame(test), start = 1)
plot(test)
plot(log10(test))
plot(diff(test))
plot(diff(diff(test)))
HoltWinters(test)
auto.arima(test)
auto.arima(test[, 2])
auto.arima(test[, 2], d = 1)
acf(test[, 2])
pacf(test[, 2])
acf(diff(test[, 2]))
plot(test[, 2])
model <- auto.arima(test[, 2])
model
model$fitted
model$fitted - model$x
sum(model$fitted - model$x)
model
forecast(model)
model <- auto.arima(test[, 2])
forecast(object = model)
forecast(object = model, h = 10)
plot(test[, 2])
pacf(log(test[, 2]))
acf(log(test[, 2]))
model <- arima(test[, 2], order = c(0, 1, 3))
forecast(object = model, )
View(testData)
test <- trainData[which(trainData$id == "AS14.02"), c("date", "interp_mood")]
test <- ts(data =  as.data.frame(test), start = 1)
plot(test[, 2])
acf(log(test[, 2]))
pacf(log(test[, 2]))
model <- arima(test[, 2], order = c(0, 1, 1))
forecast(object = model, )
model
model <- arima(test[, 2], order = c(4, 1, 1))
model
model <- arima(test[, 2], order = c(2, 1, 1))
model
model <- arima(test[, 2], order = c(1, 1, 1))
model
model <- arima(test[, 2], order = c(0, 1, 1))
model
model <- arima(test[, 2], order = c(0, 2, 1))
model
model <- arima(test[, 2], order = c(0, 1, 0))
model
forecast(object = model, )
model <- arima(test[, 2], order = c(0, 0, 1))
model
model <- arima(test[, 2], order = c(1, 0, 1))
model
model <- arima(test[, 2], order = c(2, 0, 1))
model
model <- arima(test[, 2], order = c(1, 0, 2))
model
model <- arima(test[, 2], order = c(1, 0, 0))
model
model <- arima(test[, 2], order = c(1, 0, 1))
model
model <- arima(test[, 2], order = c(0, 0, 1))
model
forecast(object = model, )
model <- auto.arima(test[, 2])
model
forecast(object = model)
model <- auto.arima(test[, 2])
model
f = forecast(object = model)
f
test <- trainData[which(trainData$id == "AS14.03"), c("date", "interp_mood")]
test <- ts(data =  as.data.frame(test), start = 1)
plot(test[, 2])
acf(log(test[, 2]))
pacf(log(test[, 2]))
model <- auto.arima(test[, 2])
model
forecast(object = model)
View(testData)
f = forecast(object = model)
f$fitted
f$residuals
f$method
f$level
f$mean
forecast(object = model)
f$series
HoltWinters(test[, 2]))
HoltWinters(test[, 2])
HoltWinters(test)
test <- ts(data =  as.data.frame(test), start = 1, frequency = 1)
plot(test[, 2])
acf(log(test[, 2]))
pacf(log(test[, 2]))
model <- auto.arima(test[, 2])
model
f = forecast(object = model)
f$mean
HoltWinters(test)
fit <- tbats(test[, 2])
fc <- forecast(fit, h=20)
fc <- forecast(fit, h=20)
fc
fc <- forecast(fit, h=10)
sum(f$mean*f$mean)
sum(fc$mean*fc$mean)
plot(fc)
fit <- tbats(log(test[, 2]))
fc <- forecast(fit, h=10)
plot(fc)
fit <- tbats(diff(log(test[, 2])))
fc <- forecast(fit, h=10)
plot(fc)
sum(f$residuals*f$residuals)
sum(cf$residuals*fc$residuals)
sum(fc$residuals*fc$residuals)
plot(model)
f$mean
View(testData)
